{"version":3,"sources":["components/BarChart.js","components/LineChart.js","components/Doughnut.js","data/index.js","components/App.js","index.js"],"names":["BarChart","chartRef","createRef","this","props","data","title","color","myChart","Chart","current","type","options","legend","labels","fontColor","maintainAspectRatio","responsive","scales","yAxes","gridLines","ticks","min","max","xAxes","map","d","label","datasets","value","backgroundColor","update","ref","Component","LineChart","React","time","unit","fill","pointRadius","borderColor","borderWidth","lineTension","Doughnut","colors","getRandomArray","numItems","substr","split","name","Math","round","random","getRandomDateArray","baseTime","Date","getTime","i","push","App","state","feeds","defaults","global","defaultFontColor","defaultFontFamily","window","setInterval","setState","className","ReactDOM","render","document","getElementById"],"mappings":"2PAuEeA,E,kDAnEb,aAAe,IAAD,8BACZ,gBACKC,SAAWC,sBAFJ,E,gEAKO,IAAD,EACaC,KAAKC,MAA5BC,EADU,EACVA,KAAMC,EADI,EACJA,MAAOC,EADH,EACGA,MACrBJ,KAAKK,QAAU,IAAIC,IAAMN,KAAKF,SAASS,QAAS,CAC9CC,KAAM,MACNC,QAAS,CACPC,OAAO,CACLC,OAAO,CACHC,UAAU,UAGhBC,qBAAqB,EACrBC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAU,CACRb,MAAM,0BAERc,MAAO,CACLC,IAAK,EACLC,IAAK,OAIXC,MAAM,CACJ,CACEJ,UAAU,CACRb,MAAM,8BAMhBF,KAAM,CACJS,OAAQT,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAC1BC,SAAU,CACR,CACED,MAAOrB,EACPD,KAAMA,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEG,SACxBC,gBAAiBvB,S,2CAOL,IACZF,EAASF,KAAKC,MAAdC,KACRF,KAAKK,QAAQH,KAAKS,OAAST,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAC7CxB,KAAKK,QAAQH,KAAKuB,SAAS,GAAGvB,KAAOA,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEG,SACvD1B,KAAKK,QAAQuB,W,+BAIb,OACE,6BACE,4BAAQC,IAAK7B,KAAKF,gB,GA9DHgC,aCyERC,G,yDAtEX,aAAc,IAAD,8BACT,gBACKjC,SAAWkC,IAAMjC,YAFb,E,iEAKQ,IACXG,EAAQF,KAAKC,MAAbC,KACPF,KAAKK,QAAQH,KAAKS,OAAST,EAAKoB,KAAI,SAAAC,GAAC,OAAIA,EAAEU,QAC3CjC,KAAKK,QAAQH,KAAKuB,SAAS,GAAGvB,KAAOA,EAAKoB,KAAI,SAAAC,GAAC,OAAIA,EAAEG,SACrD1B,KAAKK,QAAQuB,W,0CAGK,IAAD,EACa5B,KAAKC,MAA3BC,EADS,EACTA,KAAMC,EADG,EACHA,MAAOC,EADJ,EACIA,MAEpBJ,KAAKK,QAAU,IAAIC,IAAMN,KAAKF,SAASS,QAAQ,CAC3CC,KAAM,OACNC,QAAS,CACLC,OAAO,CACHC,OAAO,CACHC,UAAU,UAGlBC,qBAAqB,EACrBE,OAAQ,CACJM,MAAO,CACH,CAAIJ,UAAU,CACVb,MAAM,0BAENI,KAAM,OACNyB,KAAM,CACFC,KAAM,UAIlBlB,MAAO,CACH,CAACC,UAAU,CACPb,MAAM,0BAENc,MAAO,CACHC,IAAK,OAMzBjB,KAAM,CACFS,OAAQT,EAAKoB,KAAI,SAAAC,GAAC,OAAGA,EAAEU,QACvBR,SAAU,CAAC,CACPD,MAAOrB,EACPD,KAAMA,EAAKoB,KAAI,SAAAC,GAAC,OAAGA,EAAEG,SACrBS,KAAM,OACNR,gBAAiBvB,EACjBgC,YAAa,EACbC,YAAajC,EACbkC,YAAa,EACbC,YAAa,S,+BAOzB,OAAO,4BAAQV,IAAK7B,KAAKF,e,GAhETgC,cC0CTU,E,kDA3Cb,aAAe,IAAD,8BACZ,gBACK1C,SAAWC,sBAFJ,E,iEAKQ,IACXG,EAAQF,KAAKC,MAAbC,KACPF,KAAKK,QAAQH,KAAKS,OAAST,EAAKoB,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAC3CxB,KAAKK,QAAQH,KAAKuB,SAAS,GAAGvB,KAAOA,EAAKoB,KAAI,SAAAC,GAAC,OAAEA,EAAEG,SACnD1B,KAAKK,QAAQuB,W,0CAII,IAAD,EACO5B,KAAKC,MAAtBC,EADU,EACVA,KAAMuC,EADI,EACJA,OACdzC,KAAKK,QAAU,IAAIC,IAAMN,KAAKF,SAASS,QAAS,CAC9CE,QAAQ,CACJI,qBAAqB,EACrBH,OAAO,CACHC,OAAO,CACHC,UAAU,WAKtBJ,KAAM,WACNN,KAAM,CACJS,OAAQT,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAC1BC,SAAU,CACR,CACEvB,KAAMA,EAAKoB,KAAI,SAACC,GAAD,OAAOA,EAAEG,SACxBC,gBAAiBc,S,+BAQzB,OAAO,4BAAQZ,IAAK7B,KAAKF,e,GAxCNgC,aCHjBY,EAAiB,SAACC,GAEtB,MADc,6BAA6BC,OAAO,EAAGD,GAAUE,MAAM,IACxDvB,KAAI,SAACwB,GAChB,MAAO,CAAEtB,MAAOsB,EAAMpB,MAAOqB,KAAKC,MAAM,GAAK,GAAKD,KAAKE,eAIrDC,EAAqB,SAACP,GAI1B,IAHA,IAAIQ,EAAW,IAAIC,KAAK,uBAAuBC,UAEzCnD,EAAO,GACJoD,EAAI,EAAGA,EAAIX,EAAUW,IAC5BpD,EAAKqD,KAAK,CACRtB,KAAM,IAAImB,KAAKD,EAJP,MAIkBG,GAC1B5B,MAAOqB,KAAKC,MAAM,GAAK,GAAKD,KAAKE,YAGrC,OAAO/C,GAGM,aACb,MAAO,CACL,CACEC,MAAO,SACPD,KAAMgD,EAAmB,MAG3B,CACE/C,MAAO,mBACPD,KAAMwC,EAAe,KAGvB,CACEvC,MAAO,SACPD,KAAMwC,EAAe,IAEvB,CACEvC,MAAO,mBACPD,KAAMwC,EAAe,MCsCZc,E,4MApEbC,MAAQ,CAAEC,MAAOxD,K,kEAEI,IAAD,OAClBI,IAAMqD,SAASC,OAAOC,iBAAmB,YACzCvD,IAAMqD,SAASC,OAAOE,kBAAoB,uBAC1CC,OAAOC,aAAY,WACjB,EAAKC,SAAS,CACZP,MAAOxD,QAER,O,+BAIH,OACE,yBAAKgE,UAAU,OACb,yBAAKA,UAAU,SACb,sFACA,kDACuB,MAIzB,yBAAKA,UAAU,eACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEhE,KAAMF,KAAKyD,MAAMC,MAAM,GAAGxD,KAC1BC,MAAOH,KAAKyD,MAAMC,MAAM,GAAGvD,MAC3BC,MAAM,aAIV,yBAAK8D,UAAU,qBACb,kBAAC,EAAD,CACEhE,KAAMF,KAAKyD,MAAMC,MAAM,GAAGxD,KAC1BC,MAAOH,KAAKyD,MAAMC,MAAM,GAAGvD,MAC3BC,MAAM,aAGV,yBAAK8D,UAAU,8BACb,kBAAC,EAAD,CACEhE,KAAMF,KAAKyD,MAAMC,MAAM,GAAGxD,KAC1BC,MAAOH,KAAKyD,MAAMC,MAAM,GAAGvD,MAC3BsC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,eAMR,yBAAKyB,UAAU,sBAEb,kBAAC,EAAD,CACEhE,KAAMF,KAAKyD,MAAMC,MAAM,GAAGxD,KAC1BC,MAAOH,KAAKyD,MAAMC,MAAM,GAAGvD,MAC3BC,MAAM,kB,GA5DA0B,a,OCFlBqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b8bf39a7.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport Chart from \"chart.js\";\n\nclass BarChart extends Component {\n  constructor() {\n    super();\n    this.chartRef = createRef();\n  }\n\n  componentDidMount() {\n    const { data, title, color } = this.props;\n    this.myChart = new Chart(this.chartRef.current, {\n      type: \"bar\",\n      options: {\n        legend:{\n          labels:{\n              fontColor:'white'\n          }\n      },\n        maintainAspectRatio: false,\n        responsive: true,\n        scales: {\n          yAxes: [\n            {  \n              gridLines:{\n                color:'rgba(255,255,255, 0.1)'\n              },\n              ticks: {\n                min: 0,\n                max: 100,\n              },\n            },\n          ],\n          xAxes:[\n            {\n              gridLines:{\n                color:'rgba(255,255,255, 0.1)'\n              }\n            }\n          ]\n        },\n      },\n      data: {\n        labels: data.map((d) => d.label),\n        datasets: [\n          {\n            label: title,\n            data: data.map((d) => d.value),\n            backgroundColor: color,\n          },\n        ],\n      },\n    });\n  }\n\n  componentDidUpdate() {\n    const { data } = this.props;\n    this.myChart.data.labels = data.map((d) => d.label);\n    this.myChart.data.datasets[0].data = data.map((d) => d.value);\n    this.myChart.update();\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n","import React, { Component, createRef } from 'react';\nimport Chart from 'chart.js';\nimport { findAllByTitle } from '@testing-library/react';\n\n\nclass LineChart extends Component {\n    constructor(){\n        super();\n        this.chartRef = React.createRef();\n        \n    }\n   componentDidUpdate() {\n       const {data} = this.props;\n       this.myChart.data.labels = data.map(d => d.time);\n       this.myChart.data.datasets[0].data = data.map(d => d.value)\n       this.myChart.update();\n   }\n\n    componentDidMount() {\n        const {data, title, color} = this.props;\n       \n        this.myChart = new Chart(this.chartRef.current,{\n            type: 'line',\n            options: {\n                legend:{\n                    labels:{\n                        fontColor:'white'\n                    }\n                },\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [\n                        {   gridLines:{\n                            color:'rgba(255,255,255, 0.1)'\n                          },\n                            type: 'time',\n                            time: {\n                                unit: 'week'\n                            }\n                        }\n                    ],\n                    yAxes: [\n                        {gridLines:{\n                            color:'rgba(255,255,255, 0.1)'\n                          },\n                            ticks: {\n                                min: 0\n                            }\n                        }\n                    ]\n                }\n            },\n            data: {\n                labels: data.map(d=> d.time),\n                datasets: [{\n                    label: title,\n                    data: data.map(d=> d.value),\n                    fill: 'none',\n                    backgroundColor: color,\n                    pointRadius: 2,\n                    borderColor: color,\n                    borderWidth: 1,\n                    lineTension: 0\n                }]\n            }\n        })\n    }\n\n    render() {\n        return <canvas ref={this.chartRef} />\n    }\n\n\n\n}\n\nexport default LineChart;","import React, { createRef, Component } from \"react\";\nimport Chart from 'chart.js'\n\nclass Doughnut extends Component {\n  constructor() {\n    super();\n    this.chartRef = createRef();\n  }\n\n  componentDidUpdate() {\n      const {data} = this.props;\n      this.myChart.data.labels = data.map(d => d.label )\n      this.myChart.data.datasets[0].data = data.map(d=>d.value)\n      this.myChart.update();\n  }\n\n\n  componentDidMount() {\n    const { data, colors } = this.props;\n    this.myChart = new Chart(this.chartRef.current, {\n      options:{\n          maintainAspectRatio: false,\n          legend:{\n              labels:{\n                  fontColor:'white'\n              }\n          }\n        \n        },\n      type: \"doughnut\",\n      data: {\n        labels: data.map((d) => d.label),\n        datasets: [\n          {\n            data: data.map((d) => d.value),\n            backgroundColor: colors,\n          },\n        ],\n      },\n    });\n  }\n\n  render() {\n    return <canvas ref={this.chartRef} />;\n  }\n}\n\nexport default Doughnut;\n","const getRandomArray = (numItems) => {\n  const names = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".substr(0, numItems).split(\"\");\n  return names.map((name) => {\n    return { label: name, value: Math.round(20 + 80 * Math.random()) };\n  });\n};\n\nconst getRandomDateArray = (numItems) => {\n  let baseTime = new Date(\"2020-08-01T00:00:00\").getTime();\n  let dayMs = 24 * 60 * 60 * 1000;\n  const data = [];\n  for (let i = 0; i < numItems; i++) {\n    data.push({\n      time: new Date(baseTime + i * dayMs),\n      value: Math.round(20 + 80 * Math.random()),\n    });\n  }\n  return data;\n};\n\nexport default () => {\n  return [\n    {\n      title: \"Visits\",\n      data: getRandomDateArray(150),\n    },\n\n    {\n      title: \"Parameter Violet\",\n      data: getRandomArray(20),\n    },\n\n    {\n      title: \"Data 4\",\n      data: getRandomArray(6),\n    },\n    {\n      title: \"Orange Parameter\",\n      data: getRandomArray(8),\n    },\n  ];\n};\n","import React, { Component } from \"react\";\nimport BarChart from \"./BarChart\";\nimport LineChart from \"./LineChart\";\nimport Doughnut from \"./Doughnut\";\nimport data from \"../data\";\nimport Chart from \"chart.js\";\n\nclass App extends Component {\n  state = { feeds: data() };\n\n  componentDidMount() {\n    Chart.defaults.global.defaultFontColor = \"#FFFFFF6F\";\n    Chart.defaults.global.defaultFontFamily = \"'Roboto', sans-serif\";\n    window.setInterval(() => {\n      this.setState({\n        feeds: data(),\n      });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"title\">\n          <h1>React Analytics Dashboard Test Renders using charts.js</h1>\n          <p>\n            Testing out Chart.js{\" \"}\n          </p>\n        </div>\n\n        <div className=\"sub-wrapper\">\n          <div className=\"sub chart-wrapper\">\n            <BarChart\n              data={this.state.feeds[1].data}\n              title={this.state.feeds[1].title}\n              color=\"#955196\"\n            />\n          </div>\n\n          <div className=\"sub chart-wrapper\">\n            <BarChart\n              data={this.state.feeds[3].data}\n              title={this.state.feeds[3].title}\n              color=\"#ff6e54\"\n            />\n          </div>\n          <div className=\"sub chart-wrapper doughnut\">\n            <Doughnut\n              data={this.state.feeds[2].data}\n              title={this.state.feeds[2].title}\n              colors={[\n                \"#003f5c\",\n                \"#444e86\",\n                \"#955196\",\n                \"#dd5182\",\n                \"#ff6e54\",\n                \"#ffa600\",\n              ]}\n            />\n          </div>\n        </div>\n\n        <div className=\"main chart-wrapper\">\n          \n          <LineChart\n            data={this.state.feeds[0].data}\n            title={this.state.feeds[0].title}\n            color=\"#ffa600\"\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\nimport './style/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}